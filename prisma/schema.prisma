generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  creatorId   String
  creator     User         @relation("OrganizationCreator", fields: [creatorId], references: [id])
  invitations Invitation[]
  issues      Issue[]
  subscribers Subscription[]

  @@index([name])
}

model Subscription {
  organizationId String
  userId        String
  organization   Organization @relation(fields: [organizationId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@id([organizationId, userId])
}

model User {
  id                 String          @id @default(cuid())
  name               String?
  email              String          @unique
  username           String?         @unique
  emailVerified      DateTime?
  image              String?
  lastLogin          DateTime?
  role               Role            @default(USER)
  accounts           Account[]
  comments           Comment[]
  assignedIssues     Issue[]         @relation("IssueAssignee")
  createdIssues      Issue[]         @relation("IssueCreator")
  sessions           Session[]
  subscriptions Subscription[] // Add this line
  createdOrganizations Organization[] @relation("OrganizationCreator") // New field
}



model Comment {
  id        String    @id @default(uuid())
  text      String
  issueId   String
  userId    String
  replyToId String?
  commentId String?
  createdAt DateTime  @default(now())
  issue     Issue     @relation(fields: [issueId], references: [id])
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")
  user      User      @relation(fields: [userId], references: [id])

  @@index([issueId])
  @@index([userId])
}

model Issue {
  id               String        @id @default(uuid())
  title            String
  description      Json
  status           Status        @default(OPEN)
  priority         Priority      @default(MEDIUM)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  organizationId   String?
  userId           String?
  assignedToUserId String?
  comments         Comment[]
  assignedToUser   User?         @relation("IssueAssignee", fields: [assignedToUserId], references: [id])
  organization     Organization? @relation(fields: [organizationId], references: [id])
  user             User?       @relation("IssueCreator", fields: [userId], references: [id])
}




model Invitation {
  id             String       @id @default(cuid())
  email          String
  organizationId String
  code           String       @unique
  accepted       Boolean      @default(false)
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
  OVERDUE
  COMPLETED
  CANCELLED
  REOPENED
  NOT_STARTED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  MORNAL
  CRITICAL
}
