// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              String         @id @default(uuid())
  name            String?
  email           String         @unique
  emailVerified   DateTime?
  image           String?
  lastLogin       DateTime?
  role            Role           @default(USER)
  organizationId  Int?
  organization    Organization?  @relation(fields: [organizationId], references: [id], name: "UserOrganization")
  createdIssues   Issue[]        @relation("IssueCreator")
  assignedIssues  Issue[]        @relation("IssueAssignee")
  comments        Comment[]
  accounts        Account[]
  sessions        Session[]
}

model Issue {
  id               String         @id @default(uuid())
  title            String         @db.VarChar(255)
  description      String         @db.Text
  status           Status         @default(OPEN)
  priority         Priority       @default(MEDIUM)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  organizationId   Int?
  organization     Organization?  @relation(fields: [organizationId], references: [id])
  userId           String
  user             User           @relation(fields: [userId], references: [id], name: "IssueCreator")
  assignedToUserId String?        @db.VarChar(255)
  assignedToUser   User?          @relation(fields: [assignedToUserId], references: [id], name: "IssueAssignee")
  comments         Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  issueId   String
  issue     Issue    @relation(fields: [issueId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([issueId]) // Add an index to issueId for improved query performance
  @@index([userId]) // Consider adding an index to userId as well, if you expect to query comments by user often
}

model Organization {
  id              Int       @id @default(autoincrement())
  name            String
  users           User[]    @relation("UserOrganization")
  issues          Issue[]
  invitations     Invitation[]
}

model Invitation {
  id              String     @id @default(uuid())
  email           String
  organizationId  Int
  organization    Organization  @relation(fields: [organizationId], references: [id])
  code            String       @unique
  accepted        Boolean      @default(false)
  createdAt       DateTime     @default(now())
}

// Assuming definitions for Account and Session models.
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enum definitions assumed based on your schema's usage.
enum Role {
  USER
  ADMIN
  // Add other roles as needed
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
  OVERDUE
  COMPLETED
  CANCELLED
  REOPENED
  NOT_STARTED
  // Add other statuses as needed
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  MORNAL
  CRITICAL
  // Add other priorities as needed
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
